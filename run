import tkinter as tk
from tkinter import ttk
import threading
import socket
import time
from datetime import datetime
from ping3 import ping
from ttkthemes import ThemedStyle


class MenuScreen:
    def __init__(self):
        self.total_uptime = 0
        self.total_downtime = 0


class NetworkMonitorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Network Monitoring App")
        self.style = ThemedStyle(root)
        self.style.set_theme("arc")  # You can choose a different theme

        self.target_address = "google.com"
        self.total_online_time = 0
        self.total_downtime = 0
        self.last_status_update_time = time.time()

        self.network_status_label = ttk.Label(root, text="Network Status: -", font=("Helvetica", 18))
        self.latency_label = ttk.Label(root, text="Latency: - ms", font=("Helvetica", 18))
        self.total_online_label = ttk.Label(root, text="Total Uptime: -", font=("Helvetica", 18))
        self.total_downtime_label = ttk.Label(root, text="Total Downtime: -", font=("Helvetica", 18))
        self.status_log_text = tk.Text(root, height=15, width=80, font=("Helvetica", 12))
        self.start_button = ttk.Button(root, text="Start Monitoring", command=self.start_monitoring, style="TButton")
        self.stop_button = ttk.Button(root, text="Stop Monitoring", command=self.stop_monitoring, style="TButton")

        self.network_status_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")
        self.latency_label.grid(row=1, column=0, padx=10, pady=10, sticky="w")
        self.total_online_label.grid(row=2, column=0, padx=10, pady=10, sticky="w")
        self.total_downtime_label.grid(row=3, column=0, padx=10, pady=10, sticky="w")
        self.status_log_text.grid(row=4, column=0, padx=10, pady=10, sticky="w")
        self.start_button.grid(row=5, column=0, padx=10, pady=10)
        self.stop_button.grid(row=6, column=0, padx=10, pady=10)

        self.monitoring_thread = None
        self.is_monitoring = False
        self.interruption_start_time = None

        self.log_file_path = "network_monitor_log.txt"
        self.open_log_file()
        self.menu_screen = MenuScreen()


    def open_log_file(self):
        self.log_file = open(self.log_file_path, "a")

    def write_to_log_file(self, message):
        if self.log_file:
            if not hasattr(self, 'totals_written') or not self.totals_written:
                total_online_hours, total_online_remainder = divmod(self.menu_screen.total_uptime, 3600)
                total_online_minutes, total_online_seconds = divmod(total_online_remainder, 60)
                total_downtime_hours, total_downtime_remainder = divmod(self.menu_screen.total_downtime, 3600)
                total_downtime_minutes, total_downtime_seconds = divmod(total_downtime_remainder, 60)

                total_online_text = f"Total Uptime: {int(total_online_hours)}h {int(total_online_minutes)}m {int(total_online_seconds)}s"
                total_downtime_text = f"Total Downtime: {int(total_downtime_hours)}h {int(total_downtime_minutes)}m {int(total_downtime_seconds)}s"

                self.log_file.write(f"{total_online_text}\n")
                self.log_file.write(f"{total_downtime_text}\n")

                self.totals_written = True

            self.log_file.write(f"{message}\n")

            if "Network Offline" in message:
                current_time = time.time()
                if not hasattr(self, 'last_offline_time'):
                    self.last_offline_time = current_time
                else:
                    self.menu_screen.total_downtime += current_time - self.last_offline_time
                    self.last_offline_time = current_time

            self.log_file.flush()

    def start_monitoring(self):
        if not self.is_monitoring:
            self.is_monitoring = True
            self.monitoring_thread = threading.Thread(target=self.monitor_network)
            self.monitoring_thread.start()
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            self.status_log_text.delete(1.0, tk.END)
            self.log_status("Monitoring started.")

    def stop_monitoring(self):
        if self.is_monitoring:
            self.is_monitoring = False
            self.monitoring_thread.join()
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")
            self.log_status("Monitoring stopped.")

    def monitor_network(self):
        while self.is_monitoring:
            try:
                network_status = self.check_network_status()
                latency = self.measure_latency()
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                self.update_gui(network_status, latency, timestamp)
                self.log_status(
                    f"{timestamp} - Network {'Online' if network_status else 'Offline'} - Latency: {latency} ms")

            except Exception as e:
                print(f"Error monitoring network: {e}")

            time.sleep(5)

    def check_network_status(self):
        try:
            socket.create_connection((self.target_address, 80), timeout=5)
            return True
        except (socket.timeout, ConnectionError, socket.error):
            return False

    def measure_latency(self):
        try:
            latency = ping(self.target_address)
            return latency if latency is not None else -1
        except Exception as e:
            print(f"Error measuring latency: {e}")
            return -1

    def log_status(self, message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"{timestamp} - {message}"
        self.write_to_log_file(log_message)

        self.status_log_text.insert(tk.END, f"{log_message}\n")
        self.status_log_text.see(tk.END)

    def update_gui(self, network_status, latency, timestamp):
        status_text = f"Network Status: {'Online' if network_status else 'Offline'}"
        latency_text = f"Latency: {latency} ms"

        self.network_status_label.config(text=status_text)
        self.latency_label.config(text=latency_text)

        current_time = time.time()

        if not network_status and self.interruption_start_time is None:
            self.interruption_start_time = current_time

        if network_status and self.interruption_start_time is not None:
            duration = current_time - self.interruption_start_time
            self.total_downtime += duration
            self.interruption_start_time = None

        if network_status:
            duration = current_time - self.last_status_update_time
            self.total_online_time += duration
            self.last_status_update_time = current_time

        total_online_hours, total_online_remainder = divmod(self.total_online_time, 3600)
        total_online_minutes, total_online_seconds = divmod(total_online_remainder, 60)
        total_downtime_hours, total_downtime_remainder = divmod(self.total_downtime, 3600)
        total_downtime_minutes, total_downtime_seconds = divmod(total_downtime_remainder, 60)

        total_online_text = f"Total Uptime: {int(total_online_hours)}h {int(total_online_minutes)}m {int(total_online_seconds)}s"
        total_downtime_text = f"Total Downtime: {int(total_downtime_hours)}h {int(total_downtime_minutes)}m {int(total_downtime_seconds)}s"

        self.total_online_label.config(text=total_online_text)
        self.total_downtime_label.config(text=total_downtime_text)

        self.write_to_log_file(
            f"{timestamp} - Network {'Online' if network_status else 'Offline'} - Latency: {latency} ms")

    def log_status(self, message):
        self.status_log_text.insert(tk.END, f"{message}\n")
        self.status_log_text.see(tk.END)

    def close_log_file(self):
        if self.log_file:
            self.log_file.close()

    def __del__(self):
        self.close_log_file()


if __name__ == "__main__":
    root = tk.Tk()
    app = NetworkMonitorApp(root)
    root.mainloop()
